[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "omnicomm"
dynamic = ["version"]
description = "Implementation of the Omnicomm protocol"
readme = "README.md"
requires-python = ">=3.10"
license = "MIT"
keywords = [
  "omnicomm",
  "protocol",
  "omnicomm-protocol",
  "tcp",
  "tcp-protocol",
  "protobuf",
  "monitoring",
  "network",
]
authors = [
  { name = "Sergei Pikhovkin", email = "s@pikhovkin.ru" },
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  'Programming Language :: Python :: 3 :: Only',
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: System :: Monitoring",
  "Topic :: Utilities",
]
dependencies = [
  "libscrc",
  "protobuf==3.20.3",
]

[project.urls]
Documentation = "https://github.com/pikhovkin/omnicomm#readme"
Issues = "https://github.com/pikhovkin/omnicomm/issues"
Source = "https://github.com/pikhovkin/omnicomm"

[tool.hatch.version]
path = "omnicomm/__init__.py"

[tool.hatch.build]
include = [
  "omnicomm/",
  "README.md",
  "LICENSE",
  "pyproject.toml",
]
#exclude = [
#  "*.json",
#  "pkg/_compat.py",
#]

[tool.hatch.envs.default]
dependencies = [
  "coverage[toml]>=6.5",
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:omnicomm/tests}"
test-cov = "coverage run -m pytest {args:omnicomm/tests}"
cov-report = [
  "- coverage combine",
  "coverage report",
  "coverage json",
]
cov = [
  "test-cov",
  "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black==24.8.0",
  "mypy>=1.10, <1.11",
  "ruff==0.6.2",
  "isort>=5.13.2",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:omnicomm}"
style = [
  "ruff check {args:omnicomm}",
  "black --check --diff {args:omnicomm}",
]
fmt = [
  "isort {args:omnicomm}",
  "black {args:omnicomm}",
  "ruff format {args:omnicomm}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.mypy]
exclude = [
  'omnicomm/proto',
]
follow_imports = 'skip'

[tool.black]
target-version = ["py310"]
line-length = 120
skip-string-normalization = true
extend-exclude = 'omnicomm/proto'

[tool.ruff]
src = [
  'omnicomm',
]
target-version = "py310"
line-length = 120
indent-width = 4
#lint.extend-select = ["I"]
lint.select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
#  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
lint.ignore = [
  'Q000', 'C408', 'T201', 'RUF002',
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
  # To avoid conflict with formatter
  "ISC001",
]
lint.unfixable = [
  # Don't touch unused imports
  "F401",
]
extend-exclude = [
  "omnicomm/proto"
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["omnicomm"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["omnicomm",]
branch = true
parallel = true
omit = [
  "omnicomm/__init__.py",
]

[tool.coverage.paths]
omnicomm = ["omnicomm", "*/omnicomm/omnicomm"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
